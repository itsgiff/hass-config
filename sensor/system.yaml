###########################################
# System Sensors
###########################################
- platform: websocket_api

- platform: version
  source: hassio

- platform: version
  source: local

- platform: authenticated
  enable_notification: false
  exclude:
    - 172.30.32.2
    - 172.30.33.0
    - 172.30.33.1
    - 172.30.33.2
    - 172.30.33.3
    - 172.30.33.4
    - 172.30.33.5

- platform: template
  sensors:
    last_successful_authentication_hostname:
      value_template: '{{ states.sensor.last_successful_authentication.attributes.hostname }}'
    last_successful_authentication_username:
      value_template: '{{ states.sensor.last_successful_authentication.attributes.username }}'


- platform: template
  sensors:
    home_assistant_update:
        value_template: >-
          {%- if states.sensor.latest_version.state != states.sensor.current_version.state %}
              Update Available
          {%- elif states.sensor.latest_version.state == states.sensor.current_version.state  %}
              Current Release
          {%- else %}
              Error
          {%- endif %}
        attribute_templates:
          current: '{{ states.sensor.current_version.state }}'
          release:  '{{ states.sensor.latest_version.state }}'
        friendly_name: 'Home Assistant Update'
        icon_template: >-
            {%- if states.sensor.latest_version.state != states.sensor.current_version.state %}
            mdi:package-up
            {%- elif states.sensor.latest_version.state == states.sensor.current_version.state %}
            mdi:check-circle-outline
            {% else %}
            mdi:alert-circle-outline
            {% endif %}   


- platform: template
  sensors:
    synology_update:
        value_template: >-
          {%- if is_state("binary_sensor.nas_update_available", "on") %}
              Update(s) Available
          {%- elif is_state("binary_sensor.nas_update_available", "off") %}
              No Update(s)
          {%- else %}
              Error
          {%- endif %}
        friendly_name: 'Synology Update'
        icon_template: >-
            {%- if is_state('binary_sensor.nas_update_available', 'off') %}
            mdi:checkbox-marked-circle-outline
            {%- elif is_state('binary_sensor.nas_update_available', 'on') %}
            mdi:package-down
            {% else %}
            mdi:alert-circle-outline
            {% endif %}   

- platform: rest
  resource: https://api.github.com/repos/home-assistant/home-assistant/releases/latest
  username: !secret email_account
  password: !secret github_access_token
#  authentication: basic
  value_template: '{{ value_json.tag_name }}'
  name: 'Home Assistant Release'
  headers:
    Accept: application/vnd.github.v3+json
    Content-Type: application/json
    User-Agent: Home Assistant REST sensor

- platform: command_line
  command: cat /etc/os-release | grep "PRETTY_NAME" | sed 's/PRETTY_NAME=//g' | sed 's/["]//g'
  name: Operating System

- platform: command_line
  command: "df -h | grep overlay | awk '{print $4}'"
  name: "Disk Free Space"
  scan_interval: 60

- platform: command_line
  command: "du -h /config/home-assistant_v2.db | awk '{print $1}'"
  name: "Database Size"
  scan_interval: 60

- platform: command_line
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  name: "Processor Temperature"
  unit_of_measurement: "Â°C"
  value_template: '{{ value | multiply(0.001) | round(2) }}'

- platform: systemmonitor
  resources:
    - type: last_boot
    - type: memory_free
    - type: memory_use_percent
    - type: memory_use
    - type: disk_free
    - type: disk_use_percent
    - type: disk_use
    - type: swap_free
    - type: swap_use_percent
    - type: swap_use
    - type: processor_use

- platform: uptime
  name: "Uptime"
  unit_of_measurement: hours

- platform: mqtt
  name: "Zwave Controller Status"
  state_topic: "homeassistant/zwave_stick/status"
  value_template: "{{ value_json.status }}"

- platform: mqtt
  name: "Zwave Controller Last Activity"
  state_topic: "homeassistant/zwave_stick/status"
  value_template: "{{ value_json.time | multiply(0.001) | round(0) | timestamp_local }}"
